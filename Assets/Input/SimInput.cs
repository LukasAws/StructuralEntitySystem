//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.15.0
//     from Assets/Input/SimInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Input/SimInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @SimInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @SimInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""SimInput"",
    ""maps"": [
        {
            ""name"": ""TopDownCamera"",
            ""id"": ""6988d171-df9b-4755-9f74-4f339424db07"",
            ""actions"": [
                {
                    ""name"": ""SwitchCamera"",
                    ""type"": ""Button"",
                    ""id"": ""a72efa40-b5a4-4a43-b7e6-202a84dbcab8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToFriendly"",
                    ""type"": ""Button"",
                    ""id"": ""6014cf9b-ca92-4fb4-8145-fab319564b2b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToNeutral"",
                    ""type"": ""Button"",
                    ""id"": ""d42720f3-6f48-4625-bbe9-89d5dfbe6ec6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToHostile"",
                    ""type"": ""Button"",
                    ""id"": ""ee5a6b08-ca66-4f47-ba25-25d54cb4234a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""d1ca80f3-74e5-485f-9520-37eaf1270667"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Instantiate"",
                    ""type"": ""Button"",
                    ""id"": ""1ada0fdd-b001-42c0-971c-28d9a5ef29e9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelInstaniation"",
                    ""type"": ""Button"",
                    ""id"": ""afb780d2-b251-420c-95dd-68945e269767"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e32db98d-8ce3-4240-aa52-637603e2afdd"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe00a377-4274-4ded-ae3a-4eba0285a0fc"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""155cba06-8b85-4b3f-bbec-590733d8cd3c"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToFriendly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""553e4c8b-b4c4-4452-bef2-b01af14ede70"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToFriendly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b0ded10-d4c7-4a53-aee8-2c4867746676"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToNeutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c171ac17-4011-4410-98aa-e1ad561f4bed"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToNeutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08395aa8-f8d6-4f19-bc17-ef24efc50dcb"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToHostile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5e1019e-65c1-453b-a1d9-ed7681d2c6ae"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToHostile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ac40f3a-50e9-48d2-90c1-4e2081bb2568"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Instantiate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb0731b3-9168-4e95-9678-deb98267446c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelInstaniation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ThirdPerson"",
            ""id"": ""bcf8e667-e943-476a-b8b5-5aa242c71f61"",
            ""actions"": [
                {
                    ""name"": ""SwitchCamera"",
                    ""type"": ""Button"",
                    ""id"": ""08ce5e5a-d6a4-436b-bd3b-3517d0e2cac9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchEntityInc"",
                    ""type"": ""Button"",
                    ""id"": ""8a4cc7e8-cd00-401a-9cf4-bd52a4b64454"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchEntityDec"",
                    ""type"": ""Button"",
                    ""id"": ""66053a73-3668-46e5-8ab8-6d98ebee5743"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a493cc21-ea84-49f0-954c-5d4556616c77"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1abea46e-5b0a-40d0-8812-4e89cc2295bd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchEntityInc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62abb253-3455-497f-8aaf-872cefcec711"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchEntityDec"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FreeRoam"",
            ""id"": ""340a9f55-5910-4f74-b506-a6f400be0d3a"",
            ""actions"": [
                {
                    ""name"": ""SwitchCamera"",
                    ""type"": ""Button"",
                    ""id"": ""bc4710e4-6020-4a0a-810b-97a1d3140800"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Forward"",
                    ""type"": ""Value"",
                    ""id"": ""c9292d65-9666-4b53-be29-15dd2734bccf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Value"",
                    ""id"": ""b60901a7-16a9-4030-8f64-a3972a6eb7ac"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Value"",
                    ""id"": ""747919c7-250e-49bb-9c5f-75be1bd871b4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchToEntity"",
                    ""type"": ""Button"",
                    ""id"": ""9a977fa5-1f11-4c47-82ab-1de410b7c996"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""9f437fa4-9925-4f48-83f3-c785b7012098"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""38f198ad-eb36-4ab5-9773-673888e88514"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintSpeed"",
                    ""type"": ""Value"",
                    ""id"": ""bb3474ad-2fb2-4c29-9068-3e428cc6d563"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""93baae00-8f81-4e65-9444-e8164f3d6361"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""bed5a37b-5ba9-41eb-9774-aa121366fca3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""a9f2525d-d32f-47a6-93ee-54a35266e4dd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0cb6fd8b-ec20-41b0-816d-2498d26cb788"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7272a9bb-96b4-4eee-8605-38da2620e9ae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b9075e34-982e-4757-b0b7-9185642506fb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c65bacbd-c201-4ca6-a95a-578b7d51b33b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c4339dba-271c-4790-a0dc-751045c377d2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""819badff-51da-4aaa-b534-a6a8e405b4e5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""466b7daf-c2c9-45e0-a426-81fcb127d56b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba592b19-46f4-4eda-a43d-7f6c7e595bbe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToEntity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3a69ef3e-4e41-47c3-abb7-9b8d4fa37d8d"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2efbc5c8-0b6c-4bc2-964d-15ed508b8358"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""771baad8-570b-42be-9f26-251111c0d884"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fae91a47-547e-4b72-995b-2ef6d5681f51"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b318126b-251b-4301-ac26-c0c27dc6cf9b"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""05a4d00f-bc48-42dd-98ae-a898c61d956c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e4ea82dc-9bbe-4872-b8fe-42106b2036f7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintSpeed"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""98918f15-fcf9-468d-90c0-bdc1d47cf777"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""900c79a2-54e3-4419-ab6d-8eb2e4bfe23a"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TopDownCamera
        m_TopDownCamera = asset.FindActionMap("TopDownCamera", throwIfNotFound: true);
        m_TopDownCamera_SwitchCamera = m_TopDownCamera.FindAction("SwitchCamera", throwIfNotFound: true);
        m_TopDownCamera_ToFriendly = m_TopDownCamera.FindAction("ToFriendly", throwIfNotFound: true);
        m_TopDownCamera_ToNeutral = m_TopDownCamera.FindAction("ToNeutral", throwIfNotFound: true);
        m_TopDownCamera_ToHostile = m_TopDownCamera.FindAction("ToHostile", throwIfNotFound: true);
        m_TopDownCamera_MousePos = m_TopDownCamera.FindAction("MousePos", throwIfNotFound: true);
        m_TopDownCamera_Instantiate = m_TopDownCamera.FindAction("Instantiate", throwIfNotFound: true);
        m_TopDownCamera_CancelInstaniation = m_TopDownCamera.FindAction("CancelInstaniation", throwIfNotFound: true);
        // ThirdPerson
        m_ThirdPerson = asset.FindActionMap("ThirdPerson", throwIfNotFound: true);
        m_ThirdPerson_SwitchCamera = m_ThirdPerson.FindAction("SwitchCamera", throwIfNotFound: true);
        m_ThirdPerson_SwitchEntityInc = m_ThirdPerson.FindAction("SwitchEntityInc", throwIfNotFound: true);
        m_ThirdPerson_SwitchEntityDec = m_ThirdPerson.FindAction("SwitchEntityDec", throwIfNotFound: true);
        // FreeRoam
        m_FreeRoam = asset.FindActionMap("FreeRoam", throwIfNotFound: true);
        m_FreeRoam_SwitchCamera = m_FreeRoam.FindAction("SwitchCamera", throwIfNotFound: true);
        m_FreeRoam_Forward = m_FreeRoam.FindAction("Forward", throwIfNotFound: true);
        m_FreeRoam_Right = m_FreeRoam.FindAction("Right", throwIfNotFound: true);
        m_FreeRoam_Up = m_FreeRoam.FindAction("Up", throwIfNotFound: true);
        m_FreeRoam_SwitchToEntity = m_FreeRoam.FindAction("SwitchToEntity", throwIfNotFound: true);
        m_FreeRoam_Rotate = m_FreeRoam.FindAction("Rotate", throwIfNotFound: true);
        m_FreeRoam_Sprint = m_FreeRoam.FindAction("Sprint", throwIfNotFound: true);
        m_FreeRoam_SprintSpeed = m_FreeRoam.FindAction("SprintSpeed", throwIfNotFound: true);
    }

    ~@SimInput()
    {
        UnityEngine.Debug.Assert(!m_TopDownCamera.enabled, "This will cause a leak and performance issues, SimInput.TopDownCamera.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ThirdPerson.enabled, "This will cause a leak and performance issues, SimInput.ThirdPerson.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_FreeRoam.enabled, "This will cause a leak and performance issues, SimInput.FreeRoam.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TopDownCamera
    private readonly InputActionMap m_TopDownCamera;
    private List<ITopDownCameraActions> m_TopDownCameraActionsCallbackInterfaces = new List<ITopDownCameraActions>();
    private readonly InputAction m_TopDownCamera_SwitchCamera;
    private readonly InputAction m_TopDownCamera_ToFriendly;
    private readonly InputAction m_TopDownCamera_ToNeutral;
    private readonly InputAction m_TopDownCamera_ToHostile;
    private readonly InputAction m_TopDownCamera_MousePos;
    private readonly InputAction m_TopDownCamera_Instantiate;
    private readonly InputAction m_TopDownCamera_CancelInstaniation;
    /// <summary>
    /// Provides access to input actions defined in input action map "TopDownCamera".
    /// </summary>
    public struct TopDownCameraActions
    {
        private @SimInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TopDownCameraActions(@SimInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/SwitchCamera".
        /// </summary>
        public InputAction @SwitchCamera => m_Wrapper.m_TopDownCamera_SwitchCamera;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/ToFriendly".
        /// </summary>
        public InputAction @ToFriendly => m_Wrapper.m_TopDownCamera_ToFriendly;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/ToNeutral".
        /// </summary>
        public InputAction @ToNeutral => m_Wrapper.m_TopDownCamera_ToNeutral;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/ToHostile".
        /// </summary>
        public InputAction @ToHostile => m_Wrapper.m_TopDownCamera_ToHostile;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/MousePos".
        /// </summary>
        public InputAction @MousePos => m_Wrapper.m_TopDownCamera_MousePos;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/Instantiate".
        /// </summary>
        public InputAction @Instantiate => m_Wrapper.m_TopDownCamera_Instantiate;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/CancelInstaniation".
        /// </summary>
        public InputAction @CancelInstaniation => m_Wrapper.m_TopDownCamera_CancelInstaniation;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_TopDownCamera; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TopDownCameraActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TopDownCameraActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TopDownCameraActions" />
        public void AddCallbacks(ITopDownCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_TopDownCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopDownCameraActionsCallbackInterfaces.Add(instance);
            @SwitchCamera.started += instance.OnSwitchCamera;
            @SwitchCamera.performed += instance.OnSwitchCamera;
            @SwitchCamera.canceled += instance.OnSwitchCamera;
            @ToFriendly.started += instance.OnToFriendly;
            @ToFriendly.performed += instance.OnToFriendly;
            @ToFriendly.canceled += instance.OnToFriendly;
            @ToNeutral.started += instance.OnToNeutral;
            @ToNeutral.performed += instance.OnToNeutral;
            @ToNeutral.canceled += instance.OnToNeutral;
            @ToHostile.started += instance.OnToHostile;
            @ToHostile.performed += instance.OnToHostile;
            @ToHostile.canceled += instance.OnToHostile;
            @MousePos.started += instance.OnMousePos;
            @MousePos.performed += instance.OnMousePos;
            @MousePos.canceled += instance.OnMousePos;
            @Instantiate.started += instance.OnInstantiate;
            @Instantiate.performed += instance.OnInstantiate;
            @Instantiate.canceled += instance.OnInstantiate;
            @CancelInstaniation.started += instance.OnCancelInstaniation;
            @CancelInstaniation.performed += instance.OnCancelInstaniation;
            @CancelInstaniation.canceled += instance.OnCancelInstaniation;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TopDownCameraActions" />
        private void UnregisterCallbacks(ITopDownCameraActions instance)
        {
            @SwitchCamera.started -= instance.OnSwitchCamera;
            @SwitchCamera.performed -= instance.OnSwitchCamera;
            @SwitchCamera.canceled -= instance.OnSwitchCamera;
            @ToFriendly.started -= instance.OnToFriendly;
            @ToFriendly.performed -= instance.OnToFriendly;
            @ToFriendly.canceled -= instance.OnToFriendly;
            @ToNeutral.started -= instance.OnToNeutral;
            @ToNeutral.performed -= instance.OnToNeutral;
            @ToNeutral.canceled -= instance.OnToNeutral;
            @ToHostile.started -= instance.OnToHostile;
            @ToHostile.performed -= instance.OnToHostile;
            @ToHostile.canceled -= instance.OnToHostile;
            @MousePos.started -= instance.OnMousePos;
            @MousePos.performed -= instance.OnMousePos;
            @MousePos.canceled -= instance.OnMousePos;
            @Instantiate.started -= instance.OnInstantiate;
            @Instantiate.performed -= instance.OnInstantiate;
            @Instantiate.canceled -= instance.OnInstantiate;
            @CancelInstaniation.started -= instance.OnCancelInstaniation;
            @CancelInstaniation.performed -= instance.OnCancelInstaniation;
            @CancelInstaniation.canceled -= instance.OnCancelInstaniation;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TopDownCameraActions.UnregisterCallbacks(ITopDownCameraActions)" />.
        /// </summary>
        /// <seealso cref="TopDownCameraActions.UnregisterCallbacks(ITopDownCameraActions)" />
        public void RemoveCallbacks(ITopDownCameraActions instance)
        {
            if (m_Wrapper.m_TopDownCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TopDownCameraActions.AddCallbacks(ITopDownCameraActions)" />
        /// <seealso cref="TopDownCameraActions.RemoveCallbacks(ITopDownCameraActions)" />
        /// <seealso cref="TopDownCameraActions.UnregisterCallbacks(ITopDownCameraActions)" />
        public void SetCallbacks(ITopDownCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_TopDownCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopDownCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TopDownCameraActions" /> instance referencing this action map.
    /// </summary>
    public TopDownCameraActions @TopDownCamera => new TopDownCameraActions(this);

    // ThirdPerson
    private readonly InputActionMap m_ThirdPerson;
    private List<IThirdPersonActions> m_ThirdPersonActionsCallbackInterfaces = new List<IThirdPersonActions>();
    private readonly InputAction m_ThirdPerson_SwitchCamera;
    private readonly InputAction m_ThirdPerson_SwitchEntityInc;
    private readonly InputAction m_ThirdPerson_SwitchEntityDec;
    /// <summary>
    /// Provides access to input actions defined in input action map "ThirdPerson".
    /// </summary>
    public struct ThirdPersonActions
    {
        private @SimInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ThirdPersonActions(@SimInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "ThirdPerson/SwitchCamera".
        /// </summary>
        public InputAction @SwitchCamera => m_Wrapper.m_ThirdPerson_SwitchCamera;
        /// <summary>
        /// Provides access to the underlying input action "ThirdPerson/SwitchEntityInc".
        /// </summary>
        public InputAction @SwitchEntityInc => m_Wrapper.m_ThirdPerson_SwitchEntityInc;
        /// <summary>
        /// Provides access to the underlying input action "ThirdPerson/SwitchEntityDec".
        /// </summary>
        public InputAction @SwitchEntityDec => m_Wrapper.m_ThirdPerson_SwitchEntityDec;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_ThirdPerson; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ThirdPersonActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ThirdPersonActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ThirdPersonActions" />
        public void AddCallbacks(IThirdPersonActions instance)
        {
            if (instance == null || m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Add(instance);
            @SwitchCamera.started += instance.OnSwitchCamera;
            @SwitchCamera.performed += instance.OnSwitchCamera;
            @SwitchCamera.canceled += instance.OnSwitchCamera;
            @SwitchEntityInc.started += instance.OnSwitchEntityInc;
            @SwitchEntityInc.performed += instance.OnSwitchEntityInc;
            @SwitchEntityInc.canceled += instance.OnSwitchEntityInc;
            @SwitchEntityDec.started += instance.OnSwitchEntityDec;
            @SwitchEntityDec.performed += instance.OnSwitchEntityDec;
            @SwitchEntityDec.canceled += instance.OnSwitchEntityDec;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ThirdPersonActions" />
        private void UnregisterCallbacks(IThirdPersonActions instance)
        {
            @SwitchCamera.started -= instance.OnSwitchCamera;
            @SwitchCamera.performed -= instance.OnSwitchCamera;
            @SwitchCamera.canceled -= instance.OnSwitchCamera;
            @SwitchEntityInc.started -= instance.OnSwitchEntityInc;
            @SwitchEntityInc.performed -= instance.OnSwitchEntityInc;
            @SwitchEntityInc.canceled -= instance.OnSwitchEntityInc;
            @SwitchEntityDec.started -= instance.OnSwitchEntityDec;
            @SwitchEntityDec.performed -= instance.OnSwitchEntityDec;
            @SwitchEntityDec.canceled -= instance.OnSwitchEntityDec;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ThirdPersonActions.UnregisterCallbacks(IThirdPersonActions)" />.
        /// </summary>
        /// <seealso cref="ThirdPersonActions.UnregisterCallbacks(IThirdPersonActions)" />
        public void RemoveCallbacks(IThirdPersonActions instance)
        {
            if (m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ThirdPersonActions.AddCallbacks(IThirdPersonActions)" />
        /// <seealso cref="ThirdPersonActions.RemoveCallbacks(IThirdPersonActions)" />
        /// <seealso cref="ThirdPersonActions.UnregisterCallbacks(IThirdPersonActions)" />
        public void SetCallbacks(IThirdPersonActions instance)
        {
            foreach (var item in m_Wrapper.m_ThirdPersonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ThirdPersonActions" /> instance referencing this action map.
    /// </summary>
    public ThirdPersonActions @ThirdPerson => new ThirdPersonActions(this);

    // FreeRoam
    private readonly InputActionMap m_FreeRoam;
    private List<IFreeRoamActions> m_FreeRoamActionsCallbackInterfaces = new List<IFreeRoamActions>();
    private readonly InputAction m_FreeRoam_SwitchCamera;
    private readonly InputAction m_FreeRoam_Forward;
    private readonly InputAction m_FreeRoam_Right;
    private readonly InputAction m_FreeRoam_Up;
    private readonly InputAction m_FreeRoam_SwitchToEntity;
    private readonly InputAction m_FreeRoam_Rotate;
    private readonly InputAction m_FreeRoam_Sprint;
    private readonly InputAction m_FreeRoam_SprintSpeed;
    /// <summary>
    /// Provides access to input actions defined in input action map "FreeRoam".
    /// </summary>
    public struct FreeRoamActions
    {
        private @SimInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public FreeRoamActions(@SimInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "FreeRoam/SwitchCamera".
        /// </summary>
        public InputAction @SwitchCamera => m_Wrapper.m_FreeRoam_SwitchCamera;
        /// <summary>
        /// Provides access to the underlying input action "FreeRoam/Forward".
        /// </summary>
        public InputAction @Forward => m_Wrapper.m_FreeRoam_Forward;
        /// <summary>
        /// Provides access to the underlying input action "FreeRoam/Right".
        /// </summary>
        public InputAction @Right => m_Wrapper.m_FreeRoam_Right;
        /// <summary>
        /// Provides access to the underlying input action "FreeRoam/Up".
        /// </summary>
        public InputAction @Up => m_Wrapper.m_FreeRoam_Up;
        /// <summary>
        /// Provides access to the underlying input action "FreeRoam/SwitchToEntity".
        /// </summary>
        public InputAction @SwitchToEntity => m_Wrapper.m_FreeRoam_SwitchToEntity;
        /// <summary>
        /// Provides access to the underlying input action "FreeRoam/Rotate".
        /// </summary>
        public InputAction @Rotate => m_Wrapper.m_FreeRoam_Rotate;
        /// <summary>
        /// Provides access to the underlying input action "FreeRoam/Sprint".
        /// </summary>
        public InputAction @Sprint => m_Wrapper.m_FreeRoam_Sprint;
        /// <summary>
        /// Provides access to the underlying input action "FreeRoam/SprintSpeed".
        /// </summary>
        public InputAction @SprintSpeed => m_Wrapper.m_FreeRoam_SprintSpeed;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_FreeRoam; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="FreeRoamActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(FreeRoamActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="FreeRoamActions" />
        public void AddCallbacks(IFreeRoamActions instance)
        {
            if (instance == null || m_Wrapper.m_FreeRoamActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FreeRoamActionsCallbackInterfaces.Add(instance);
            @SwitchCamera.started += instance.OnSwitchCamera;
            @SwitchCamera.performed += instance.OnSwitchCamera;
            @SwitchCamera.canceled += instance.OnSwitchCamera;
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @SwitchToEntity.started += instance.OnSwitchToEntity;
            @SwitchToEntity.performed += instance.OnSwitchToEntity;
            @SwitchToEntity.canceled += instance.OnSwitchToEntity;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @SprintSpeed.started += instance.OnSprintSpeed;
            @SprintSpeed.performed += instance.OnSprintSpeed;
            @SprintSpeed.canceled += instance.OnSprintSpeed;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="FreeRoamActions" />
        private void UnregisterCallbacks(IFreeRoamActions instance)
        {
            @SwitchCamera.started -= instance.OnSwitchCamera;
            @SwitchCamera.performed -= instance.OnSwitchCamera;
            @SwitchCamera.canceled -= instance.OnSwitchCamera;
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @SwitchToEntity.started -= instance.OnSwitchToEntity;
            @SwitchToEntity.performed -= instance.OnSwitchToEntity;
            @SwitchToEntity.canceled -= instance.OnSwitchToEntity;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @SprintSpeed.started -= instance.OnSprintSpeed;
            @SprintSpeed.performed -= instance.OnSprintSpeed;
            @SprintSpeed.canceled -= instance.OnSprintSpeed;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="FreeRoamActions.UnregisterCallbacks(IFreeRoamActions)" />.
        /// </summary>
        /// <seealso cref="FreeRoamActions.UnregisterCallbacks(IFreeRoamActions)" />
        public void RemoveCallbacks(IFreeRoamActions instance)
        {
            if (m_Wrapper.m_FreeRoamActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="FreeRoamActions.AddCallbacks(IFreeRoamActions)" />
        /// <seealso cref="FreeRoamActions.RemoveCallbacks(IFreeRoamActions)" />
        /// <seealso cref="FreeRoamActions.UnregisterCallbacks(IFreeRoamActions)" />
        public void SetCallbacks(IFreeRoamActions instance)
        {
            foreach (var item in m_Wrapper.m_FreeRoamActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FreeRoamActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="FreeRoamActions" /> instance referencing this action map.
    /// </summary>
    public FreeRoamActions @FreeRoam => new FreeRoamActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "TopDownCamera" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TopDownCameraActions.AddCallbacks(ITopDownCameraActions)" />
    /// <seealso cref="TopDownCameraActions.RemoveCallbacks(ITopDownCameraActions)" />
    public interface ITopDownCameraActions
    {
        /// <summary>
        /// Method invoked when associated input action "SwitchCamera" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchCamera(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToFriendly" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToFriendly(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToNeutral" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToNeutral(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToHostile" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToHostile(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MousePos" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMousePos(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Instantiate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInstantiate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CancelInstaniation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancelInstaniation(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "ThirdPerson" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ThirdPersonActions.AddCallbacks(IThirdPersonActions)" />
    /// <seealso cref="ThirdPersonActions.RemoveCallbacks(IThirdPersonActions)" />
    public interface IThirdPersonActions
    {
        /// <summary>
        /// Method invoked when associated input action "SwitchCamera" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchCamera(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwitchEntityInc" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchEntityInc(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwitchEntityDec" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchEntityDec(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "FreeRoam" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="FreeRoamActions.AddCallbacks(IFreeRoamActions)" />
    /// <seealso cref="FreeRoamActions.RemoveCallbacks(IFreeRoamActions)" />
    public interface IFreeRoamActions
    {
        /// <summary>
        /// Method invoked when associated input action "SwitchCamera" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchCamera(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Forward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnForward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Up" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwitchToEntity" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchToEntity(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Sprint" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSprint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SprintSpeed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSprintSpeed(InputAction.CallbackContext context);
    }
}
