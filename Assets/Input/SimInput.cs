//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.15.0
//     from Assets/Input/SimInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Input/SimInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @SimInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @SimInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""SimInput"",
    ""maps"": [
        {
            ""name"": ""TopDownCamera"",
            ""id"": ""6988d171-df9b-4755-9f74-4f339424db07"",
            ""actions"": [
                {
                    ""name"": ""SwitchCamera"",
                    ""type"": ""Button"",
                    ""id"": ""a72efa40-b5a4-4a43-b7e6-202a84dbcab8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToFriendly"",
                    ""type"": ""Button"",
                    ""id"": ""6014cf9b-ca92-4fb4-8145-fab319564b2b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToNeutral"",
                    ""type"": ""Button"",
                    ""id"": ""d42720f3-6f48-4625-bbe9-89d5dfbe6ec6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToHostile"",
                    ""type"": ""Button"",
                    ""id"": ""ee5a6b08-ca66-4f47-ba25-25d54cb4234a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""d1ca80f3-74e5-485f-9520-37eaf1270667"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Instantiate"",
                    ""type"": ""Button"",
                    ""id"": ""1ada0fdd-b001-42c0-971c-28d9a5ef29e9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSimulation"",
                    ""type"": ""Button"",
                    ""id"": ""24eb3aca-772d-4c5c-b464-88d487664b63"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelInstaniation"",
                    ""type"": ""Button"",
                    ""id"": ""afb780d2-b251-420c-95dd-68945e269767"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e32db98d-8ce3-4240-aa52-637603e2afdd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe00a377-4274-4ded-ae3a-4eba0285a0fc"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""155cba06-8b85-4b3f-bbec-590733d8cd3c"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToFriendly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""553e4c8b-b4c4-4452-bef2-b01af14ede70"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToFriendly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b0ded10-d4c7-4a53-aee8-2c4867746676"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToNeutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c171ac17-4011-4410-98aa-e1ad561f4bed"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToNeutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08395aa8-f8d6-4f19-bc17-ef24efc50dcb"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToHostile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5e1019e-65c1-453b-a1d9-ed7681d2c6ae"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToHostile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ac40f3a-50e9-48d2-90c1-4e2081bb2568"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Instantiate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74dffe8d-69c4-4732-bbc6-de82d7f3c14b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSimulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb0731b3-9168-4e95-9678-deb98267446c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelInstaniation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ThirdPerson"",
            ""id"": ""bcf8e667-e943-476a-b8b5-5aa242c71f61"",
            ""actions"": [
                {
                    ""name"": ""SwitchCamera"",
                    ""type"": ""Button"",
                    ""id"": ""08ce5e5a-d6a4-436b-bd3b-3517d0e2cac9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchEntityInc"",
                    ""type"": ""Button"",
                    ""id"": ""8a4cc7e8-cd00-401a-9cf4-bd52a4b64454"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchEntityDec"",
                    ""type"": ""Button"",
                    ""id"": ""66053a73-3668-46e5-8ab8-6d98ebee5743"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSimulation"",
                    ""type"": ""Button"",
                    ""id"": ""7f4d7d77-c599-4804-aeda-08ce2bc4b5c6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a493cc21-ea84-49f0-954c-5d4556616c77"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1abea46e-5b0a-40d0-8812-4e89cc2295bd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchEntityInc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62abb253-3455-497f-8aaf-872cefcec711"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchEntityDec"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec32a3aa-aa2d-494c-b015-05731ac8c20e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSimulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TopDownCamera
        m_TopDownCamera = asset.FindActionMap("TopDownCamera", throwIfNotFound: true);
        m_TopDownCamera_SwitchCamera = m_TopDownCamera.FindAction("SwitchCamera", throwIfNotFound: true);
        m_TopDownCamera_ToFriendly = m_TopDownCamera.FindAction("ToFriendly", throwIfNotFound: true);
        m_TopDownCamera_ToNeutral = m_TopDownCamera.FindAction("ToNeutral", throwIfNotFound: true);
        m_TopDownCamera_ToHostile = m_TopDownCamera.FindAction("ToHostile", throwIfNotFound: true);
        m_TopDownCamera_MousePos = m_TopDownCamera.FindAction("MousePos", throwIfNotFound: true);
        m_TopDownCamera_Instantiate = m_TopDownCamera.FindAction("Instantiate", throwIfNotFound: true);
        m_TopDownCamera_ToggleSimulation = m_TopDownCamera.FindAction("ToggleSimulation", throwIfNotFound: true);
        m_TopDownCamera_CancelInstaniation = m_TopDownCamera.FindAction("CancelInstaniation", throwIfNotFound: true);
        // ThirdPerson
        m_ThirdPerson = asset.FindActionMap("ThirdPerson", throwIfNotFound: true);
        m_ThirdPerson_SwitchCamera = m_ThirdPerson.FindAction("SwitchCamera", throwIfNotFound: true);
        m_ThirdPerson_SwitchEntityInc = m_ThirdPerson.FindAction("SwitchEntityInc", throwIfNotFound: true);
        m_ThirdPerson_SwitchEntityDec = m_ThirdPerson.FindAction("SwitchEntityDec", throwIfNotFound: true);
        m_ThirdPerson_ToggleSimulation = m_ThirdPerson.FindAction("ToggleSimulation", throwIfNotFound: true);
    }

    ~@SimInput()
    {
        UnityEngine.Debug.Assert(!m_TopDownCamera.enabled, "This will cause a leak and performance issues, SimInput.TopDownCamera.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ThirdPerson.enabled, "This will cause a leak and performance issues, SimInput.ThirdPerson.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TopDownCamera
    private readonly InputActionMap m_TopDownCamera;
    private List<ITopDownCameraActions> m_TopDownCameraActionsCallbackInterfaces = new List<ITopDownCameraActions>();
    private readonly InputAction m_TopDownCamera_SwitchCamera;
    private readonly InputAction m_TopDownCamera_ToFriendly;
    private readonly InputAction m_TopDownCamera_ToNeutral;
    private readonly InputAction m_TopDownCamera_ToHostile;
    private readonly InputAction m_TopDownCamera_MousePos;
    private readonly InputAction m_TopDownCamera_Instantiate;
    private readonly InputAction m_TopDownCamera_ToggleSimulation;
    private readonly InputAction m_TopDownCamera_CancelInstaniation;
    /// <summary>
    /// Provides access to input actions defined in input action map "TopDownCamera".
    /// </summary>
    public struct TopDownCameraActions
    {
        private @SimInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TopDownCameraActions(@SimInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/SwitchCamera".
        /// </summary>
        public InputAction @SwitchCamera => m_Wrapper.m_TopDownCamera_SwitchCamera;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/ToFriendly".
        /// </summary>
        public InputAction @ToFriendly => m_Wrapper.m_TopDownCamera_ToFriendly;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/ToNeutral".
        /// </summary>
        public InputAction @ToNeutral => m_Wrapper.m_TopDownCamera_ToNeutral;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/ToHostile".
        /// </summary>
        public InputAction @ToHostile => m_Wrapper.m_TopDownCamera_ToHostile;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/MousePos".
        /// </summary>
        public InputAction @MousePos => m_Wrapper.m_TopDownCamera_MousePos;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/Instantiate".
        /// </summary>
        public InputAction @Instantiate => m_Wrapper.m_TopDownCamera_Instantiate;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/ToggleSimulation".
        /// </summary>
        public InputAction @ToggleSimulation => m_Wrapper.m_TopDownCamera_ToggleSimulation;
        /// <summary>
        /// Provides access to the underlying input action "TopDownCamera/CancelInstaniation".
        /// </summary>
        public InputAction @CancelInstaniation => m_Wrapper.m_TopDownCamera_CancelInstaniation;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_TopDownCamera; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TopDownCameraActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TopDownCameraActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TopDownCameraActions" />
        public void AddCallbacks(ITopDownCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_TopDownCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopDownCameraActionsCallbackInterfaces.Add(instance);
            @SwitchCamera.started += instance.OnSwitchCamera;
            @SwitchCamera.performed += instance.OnSwitchCamera;
            @SwitchCamera.canceled += instance.OnSwitchCamera;
            @ToFriendly.started += instance.OnToFriendly;
            @ToFriendly.performed += instance.OnToFriendly;
            @ToFriendly.canceled += instance.OnToFriendly;
            @ToNeutral.started += instance.OnToNeutral;
            @ToNeutral.performed += instance.OnToNeutral;
            @ToNeutral.canceled += instance.OnToNeutral;
            @ToHostile.started += instance.OnToHostile;
            @ToHostile.performed += instance.OnToHostile;
            @ToHostile.canceled += instance.OnToHostile;
            @MousePos.started += instance.OnMousePos;
            @MousePos.performed += instance.OnMousePos;
            @MousePos.canceled += instance.OnMousePos;
            @Instantiate.started += instance.OnInstantiate;
            @Instantiate.performed += instance.OnInstantiate;
            @Instantiate.canceled += instance.OnInstantiate;
            @ToggleSimulation.started += instance.OnToggleSimulation;
            @ToggleSimulation.performed += instance.OnToggleSimulation;
            @ToggleSimulation.canceled += instance.OnToggleSimulation;
            @CancelInstaniation.started += instance.OnCancelInstaniation;
            @CancelInstaniation.performed += instance.OnCancelInstaniation;
            @CancelInstaniation.canceled += instance.OnCancelInstaniation;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TopDownCameraActions" />
        private void UnregisterCallbacks(ITopDownCameraActions instance)
        {
            @SwitchCamera.started -= instance.OnSwitchCamera;
            @SwitchCamera.performed -= instance.OnSwitchCamera;
            @SwitchCamera.canceled -= instance.OnSwitchCamera;
            @ToFriendly.started -= instance.OnToFriendly;
            @ToFriendly.performed -= instance.OnToFriendly;
            @ToFriendly.canceled -= instance.OnToFriendly;
            @ToNeutral.started -= instance.OnToNeutral;
            @ToNeutral.performed -= instance.OnToNeutral;
            @ToNeutral.canceled -= instance.OnToNeutral;
            @ToHostile.started -= instance.OnToHostile;
            @ToHostile.performed -= instance.OnToHostile;
            @ToHostile.canceled -= instance.OnToHostile;
            @MousePos.started -= instance.OnMousePos;
            @MousePos.performed -= instance.OnMousePos;
            @MousePos.canceled -= instance.OnMousePos;
            @Instantiate.started -= instance.OnInstantiate;
            @Instantiate.performed -= instance.OnInstantiate;
            @Instantiate.canceled -= instance.OnInstantiate;
            @ToggleSimulation.started -= instance.OnToggleSimulation;
            @ToggleSimulation.performed -= instance.OnToggleSimulation;
            @ToggleSimulation.canceled -= instance.OnToggleSimulation;
            @CancelInstaniation.started -= instance.OnCancelInstaniation;
            @CancelInstaniation.performed -= instance.OnCancelInstaniation;
            @CancelInstaniation.canceled -= instance.OnCancelInstaniation;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TopDownCameraActions.UnregisterCallbacks(ITopDownCameraActions)" />.
        /// </summary>
        /// <seealso cref="TopDownCameraActions.UnregisterCallbacks(ITopDownCameraActions)" />
        public void RemoveCallbacks(ITopDownCameraActions instance)
        {
            if (m_Wrapper.m_TopDownCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TopDownCameraActions.AddCallbacks(ITopDownCameraActions)" />
        /// <seealso cref="TopDownCameraActions.RemoveCallbacks(ITopDownCameraActions)" />
        /// <seealso cref="TopDownCameraActions.UnregisterCallbacks(ITopDownCameraActions)" />
        public void SetCallbacks(ITopDownCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_TopDownCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopDownCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TopDownCameraActions" /> instance referencing this action map.
    /// </summary>
    public TopDownCameraActions @TopDownCamera => new TopDownCameraActions(this);

    // ThirdPerson
    private readonly InputActionMap m_ThirdPerson;
    private List<IThirdPersonActions> m_ThirdPersonActionsCallbackInterfaces = new List<IThirdPersonActions>();
    private readonly InputAction m_ThirdPerson_SwitchCamera;
    private readonly InputAction m_ThirdPerson_SwitchEntityInc;
    private readonly InputAction m_ThirdPerson_SwitchEntityDec;
    private readonly InputAction m_ThirdPerson_ToggleSimulation;
    /// <summary>
    /// Provides access to input actions defined in input action map "ThirdPerson".
    /// </summary>
    public struct ThirdPersonActions
    {
        private @SimInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ThirdPersonActions(@SimInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "ThirdPerson/SwitchCamera".
        /// </summary>
        public InputAction @SwitchCamera => m_Wrapper.m_ThirdPerson_SwitchCamera;
        /// <summary>
        /// Provides access to the underlying input action "ThirdPerson/SwitchEntityInc".
        /// </summary>
        public InputAction @SwitchEntityInc => m_Wrapper.m_ThirdPerson_SwitchEntityInc;
        /// <summary>
        /// Provides access to the underlying input action "ThirdPerson/SwitchEntityDec".
        /// </summary>
        public InputAction @SwitchEntityDec => m_Wrapper.m_ThirdPerson_SwitchEntityDec;
        /// <summary>
        /// Provides access to the underlying input action "ThirdPerson/ToggleSimulation".
        /// </summary>
        public InputAction @ToggleSimulation => m_Wrapper.m_ThirdPerson_ToggleSimulation;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_ThirdPerson; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ThirdPersonActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ThirdPersonActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ThirdPersonActions" />
        public void AddCallbacks(IThirdPersonActions instance)
        {
            if (instance == null || m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Add(instance);
            @SwitchCamera.started += instance.OnSwitchCamera;
            @SwitchCamera.performed += instance.OnSwitchCamera;
            @SwitchCamera.canceled += instance.OnSwitchCamera;
            @SwitchEntityInc.started += instance.OnSwitchEntityInc;
            @SwitchEntityInc.performed += instance.OnSwitchEntityInc;
            @SwitchEntityInc.canceled += instance.OnSwitchEntityInc;
            @SwitchEntityDec.started += instance.OnSwitchEntityDec;
            @SwitchEntityDec.performed += instance.OnSwitchEntityDec;
            @SwitchEntityDec.canceled += instance.OnSwitchEntityDec;
            @ToggleSimulation.started += instance.OnToggleSimulation;
            @ToggleSimulation.performed += instance.OnToggleSimulation;
            @ToggleSimulation.canceled += instance.OnToggleSimulation;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ThirdPersonActions" />
        private void UnregisterCallbacks(IThirdPersonActions instance)
        {
            @SwitchCamera.started -= instance.OnSwitchCamera;
            @SwitchCamera.performed -= instance.OnSwitchCamera;
            @SwitchCamera.canceled -= instance.OnSwitchCamera;
            @SwitchEntityInc.started -= instance.OnSwitchEntityInc;
            @SwitchEntityInc.performed -= instance.OnSwitchEntityInc;
            @SwitchEntityInc.canceled -= instance.OnSwitchEntityInc;
            @SwitchEntityDec.started -= instance.OnSwitchEntityDec;
            @SwitchEntityDec.performed -= instance.OnSwitchEntityDec;
            @SwitchEntityDec.canceled -= instance.OnSwitchEntityDec;
            @ToggleSimulation.started -= instance.OnToggleSimulation;
            @ToggleSimulation.performed -= instance.OnToggleSimulation;
            @ToggleSimulation.canceled -= instance.OnToggleSimulation;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ThirdPersonActions.UnregisterCallbacks(IThirdPersonActions)" />.
        /// </summary>
        /// <seealso cref="ThirdPersonActions.UnregisterCallbacks(IThirdPersonActions)" />
        public void RemoveCallbacks(IThirdPersonActions instance)
        {
            if (m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ThirdPersonActions.AddCallbacks(IThirdPersonActions)" />
        /// <seealso cref="ThirdPersonActions.RemoveCallbacks(IThirdPersonActions)" />
        /// <seealso cref="ThirdPersonActions.UnregisterCallbacks(IThirdPersonActions)" />
        public void SetCallbacks(IThirdPersonActions instance)
        {
            foreach (var item in m_Wrapper.m_ThirdPersonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ThirdPersonActions" /> instance referencing this action map.
    /// </summary>
    public ThirdPersonActions @ThirdPerson => new ThirdPersonActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "TopDownCamera" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TopDownCameraActions.AddCallbacks(ITopDownCameraActions)" />
    /// <seealso cref="TopDownCameraActions.RemoveCallbacks(ITopDownCameraActions)" />
    public interface ITopDownCameraActions
    {
        /// <summary>
        /// Method invoked when associated input action "SwitchCamera" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchCamera(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToFriendly" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToFriendly(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToNeutral" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToNeutral(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToHostile" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToHostile(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MousePos" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMousePos(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Instantiate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInstantiate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToggleSimulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToggleSimulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CancelInstaniation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancelInstaniation(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "ThirdPerson" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ThirdPersonActions.AddCallbacks(IThirdPersonActions)" />
    /// <seealso cref="ThirdPersonActions.RemoveCallbacks(IThirdPersonActions)" />
    public interface IThirdPersonActions
    {
        /// <summary>
        /// Method invoked when associated input action "SwitchCamera" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchCamera(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwitchEntityInc" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchEntityInc(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwitchEntityDec" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchEntityDec(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToggleSimulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToggleSimulation(InputAction.CallbackContext context);
    }
}
